{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8756669,"sourceType":"datasetVersion","datasetId":5260555}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Importing Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# For ploting the graphs\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport csv","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:08:50.159886Z","iopub.execute_input":"2024-06-22T16:08:50.160269Z","iopub.status.idle":"2024-06-22T16:08:51.103455Z","shell.execute_reply.started":"2024-06-22T16:08:50.160237Z","shell.execute_reply":"2024-06-22T16:08:51.102611Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/ddos-dataset/DDoS.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:08:57.038616Z","iopub.execute_input":"2024-06-22T16:08:57.039736Z","iopub.status.idle":"2024-06-22T16:08:59.215826Z","shell.execute_reply.started":"2024-06-22T16:08:57.039698Z","shell.execute_reply":"2024-06-22T16:08:59.214759Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:01.612703Z","iopub.execute_input":"2024-06-22T16:09:01.613497Z","iopub.status.idle":"2024-06-22T16:09:01.617685Z","shell.execute_reply.started":"2024-06-22T16:09:01.613461Z","shell.execute_reply":"2024-06-22T16:09:01.616569Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# df.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:01.915329Z","iopub.execute_input":"2024-06-22T16:09:01.916232Z","iopub.status.idle":"2024-06-22T16:09:01.920087Z","shell.execute_reply.started":"2024-06-22T16:09:01.916196Z","shell.execute_reply":"2024-06-22T16:09:01.919012Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Remove the spaces before the column names\ndf.columns = df.columns.str.strip()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:02.412726Z","iopub.execute_input":"2024-06-22T16:09:02.413083Z","iopub.status.idle":"2024-06-22T16:09:02.418459Z","shell.execute_reply.started":"2024-06-22T16:09:02.413055Z","shell.execute_reply":"2024-06-22T16:09:02.417256Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# df.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:03.510166Z","iopub.execute_input":"2024-06-22T16:09:03.510818Z","iopub.status.idle":"2024-06-22T16:09:03.514985Z","shell.execute_reply.started":"2024-06-22T16:09:03.510783Z","shell.execute_reply":"2024-06-22T16:09:03.513911Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#Unique values in the Label target column\n\n# df.loc[:,'Label'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:03.863837Z","iopub.execute_input":"2024-06-22T16:09:03.864208Z","iopub.status.idle":"2024-06-22T16:09:03.868486Z","shell.execute_reply.started":"2024-06-22T16:09:03.864178Z","shell.execute_reply":"2024-06-22T16:09:03.867445Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# def pltNullDistribution(df):\n    \n#     #Checking the null values in the dataset.\n#     plt.figure(1, figsize = (10,4))\n#     plt.hist(df.isna().sum())\n    \n#     # Set the title and axis labels\n#     plt.xticks([0, 1], labels=['Not Null=0', 'Null=1'])\n#     plt.title('Null Values Distribution')\n#     plt.xlabel('Classes')\n#     plt.ylabel('Frequency')\n\n#     # Show the plot\n#     plt.show()\n    \n# pltNullDistribution(df)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:04.340843Z","iopub.execute_input":"2024-06-22T16:09:04.341761Z","iopub.status.idle":"2024-06-22T16:09:04.345875Z","shell.execute_reply.started":"2024-06-22T16:09:04.341726Z","shell.execute_reply":"2024-06-22T16:09:04.344983Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# def plotMissingValues(df):\n#     missing_values = df.isnull().sum()  # Counting null values for each column\n#     fig = plt.figure(figsize=(16, 5))\n#     missing_values.plot(kind='bar')\n#     plt.xlabel(\"Features\")\n#     plt.ylabel(\"Missing values\")\n#     plt.title(\"Total number of Missing values in each feature\")\n#     plt.show()\n\n# plotMissingValues(df)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:04.947886Z","iopub.execute_input":"2024-06-22T16:09:04.948621Z","iopub.status.idle":"2024-06-22T16:09:04.952788Z","shell.execute_reply.started":"2024-06-22T16:09:04.948580Z","shell.execute_reply":"2024-06-22T16:09:04.951741Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"The `df.dropna()` method in pandas is used to **remove missing values** (i.e., NaN or None) from a DataFrame. This method can be customized with various parameters to control which rows or columns are removed based on the presence of missing values.","metadata":{}},{"cell_type":"code","source":"data=df.dropna()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:05.899924Z","iopub.execute_input":"2024-06-22T16:09:05.900725Z","iopub.status.idle":"2024-06-22T16:09:06.003799Z","shell.execute_reply.started":"2024-06-22T16:09:05.900661Z","shell.execute_reply":"2024-06-22T16:09:06.002690Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# pltNullDistribution(data)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:06.451998Z","iopub.execute_input":"2024-06-22T16:09:06.452834Z","iopub.status.idle":"2024-06-22T16:09:06.456780Z","shell.execute_reply.started":"2024-06-22T16:09:06.452800Z","shell.execute_reply":"2024-06-22T16:09:06.455804Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"data.loc[:, :] = data.replace([np.inf, -np.inf], np.nan)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:06.883529Z","iopub.execute_input":"2024-06-22T16:09:06.884217Z","iopub.status.idle":"2024-06-22T16:09:07.120431Z","shell.execute_reply.started":"2024-06-22T16:09:06.884183Z","shell.execute_reply":"2024-06-22T16:09:07.119584Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# pltNullDistribution(data)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:07.604540Z","iopub.execute_input":"2024-06-22T16:09:07.605380Z","iopub.status.idle":"2024-06-22T16:09:07.609219Z","shell.execute_reply.started":"2024-06-22T16:09:07.605347Z","shell.execute_reply":"2024-06-22T16:09:07.608088Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# data.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:08.087707Z","iopub.execute_input":"2024-06-22T16:09:08.088097Z","iopub.status.idle":"2024-06-22T16:09:08.092505Z","shell.execute_reply.started":"2024-06-22T16:09:08.088066Z","shell.execute_reply":"2024-06-22T16:09:08.091250Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# for col in data.columns:\n#     print(data[col].dtype)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:08.550359Z","iopub.execute_input":"2024-06-22T16:09:08.551048Z","iopub.status.idle":"2024-06-22T16:09:08.555014Z","shell.execute_reply.started":"2024-06-22T16:09:08.551012Z","shell.execute_reply":"2024-06-22T16:09:08.554015Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"data['Label'] = data['Label'].map({'BENIGN': 0, 'DDoS': 1})","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:09.112500Z","iopub.execute_input":"2024-06-22T16:09:09.112861Z","iopub.status.idle":"2024-06-22T16:09:09.143827Z","shell.execute_reply.started":"2024-06-22T16:09:09.112834Z","shell.execute_reply":"2024-06-22T16:09:09.142808Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_908/816821436.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data['Label'] = data['Label'].map({'BENIGN': 0, 'DDoS': 1})\n","output_type":"stream"}]},{"cell_type":"code","source":"# plt.hist(data['Label'], bins=[0, 0.3,0.7,1], edgecolor='black')  # Specify bins as [0, 1]\n# plt.xticks([0, 1], labels=['BENIGN=0', 'DDoS=1'])\n# plt.title('Distribution of Labels')\n# plt.xlabel(\"Classes\")\n# plt.ylabel(\"Count\")\n# plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:09.610885Z","iopub.execute_input":"2024-06-22T16:09:09.611581Z","iopub.status.idle":"2024-06-22T16:09:09.615925Z","shell.execute_reply.started":"2024-06-22T16:09:09.611535Z","shell.execute_reply":"2024-06-22T16:09:09.614890Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# data.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:10.084437Z","iopub.execute_input":"2024-06-22T16:09:10.085302Z","iopub.status.idle":"2024-06-22T16:09:10.089032Z","shell.execute_reply.started":"2024-06-22T16:09:10.085266Z","shell.execute_reply":"2024-06-22T16:09:10.088019Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:10.528380Z","iopub.execute_input":"2024-06-22T16:09:10.529162Z","iopub.status.idle":"2024-06-22T16:09:10.555789Z","shell.execute_reply.started":"2024-06-22T16:09:10.529129Z","shell.execute_reply":"2024-06-22T16:09:10.554768Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   Destination Port  Flow Duration  Total Fwd Packets  Total Backward Packets  \\\n0             54865              3                  2                       0   \n1             55054            109                  1                       1   \n2             55055             52                  1                       1   \n3             46236             34                  1                       1   \n4             54863              3                  2                       0   \n\n   Total Length of Fwd Packets  Total Length of Bwd Packets  \\\n0                           12                            0   \n1                            6                            6   \n2                            6                            6   \n3                            6                            6   \n4                           12                            0   \n\n   Fwd Packet Length Max  Fwd Packet Length Min  Fwd Packet Length Mean  \\\n0                      6                      6                     6.0   \n1                      6                      6                     6.0   \n2                      6                      6                     6.0   \n3                      6                      6                     6.0   \n4                      6                      6                     6.0   \n\n   Fwd Packet Length Std  ...  min_seg_size_forward  Active Mean  Active Std  \\\n0                    0.0  ...                    20          0.0         0.0   \n1                    0.0  ...                    20          0.0         0.0   \n2                    0.0  ...                    20          0.0         0.0   \n3                    0.0  ...                    20          0.0         0.0   \n4                    0.0  ...                    20          0.0         0.0   \n\n   Active Max  Active Min  Idle Mean  Idle Std  Idle Max  Idle Min  Label  \n0           0           0        0.0       0.0         0         0      0  \n1           0           0        0.0       0.0         0         0      0  \n2           0           0        0.0       0.0         0         0      0  \n3           0           0        0.0       0.0         0         0      0  \n4           0           0        0.0       0.0         0         0      0  \n\n[5 rows x 79 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Destination Port</th>\n      <th>Flow Duration</th>\n      <th>Total Fwd Packets</th>\n      <th>Total Backward Packets</th>\n      <th>Total Length of Fwd Packets</th>\n      <th>Total Length of Bwd Packets</th>\n      <th>Fwd Packet Length Max</th>\n      <th>Fwd Packet Length Min</th>\n      <th>Fwd Packet Length Mean</th>\n      <th>Fwd Packet Length Std</th>\n      <th>...</th>\n      <th>min_seg_size_forward</th>\n      <th>Active Mean</th>\n      <th>Active Std</th>\n      <th>Active Max</th>\n      <th>Active Min</th>\n      <th>Idle Mean</th>\n      <th>Idle Std</th>\n      <th>Idle Max</th>\n      <th>Idle Min</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>54865</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>12</td>\n      <td>0</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>55054</td>\n      <td>109</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>55055</td>\n      <td>52</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>46236</td>\n      <td>34</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>54863</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>12</td>\n      <td>0</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 79 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Data Exploring","metadata":{}},{"cell_type":"code","source":"# data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:14.946032Z","iopub.execute_input":"2024-06-22T16:09:14.946857Z","iopub.status.idle":"2024-06-22T16:09:14.951001Z","shell.execute_reply.started":"2024-06-22T16:09:14.946825Z","shell.execute_reply":"2024-06-22T16:09:14.949964Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"### plot distribution","metadata":{}},{"cell_type":"code","source":"# plt.figure(5)\n\n# for col in data.columns:\n#     plt.hist(data[col])\n#     plt.title(col)\n#     plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:15.594630Z","iopub.execute_input":"2024-06-22T16:09:15.595027Z","iopub.status.idle":"2024-06-22T16:09:15.599411Z","shell.execute_reply.started":"2024-06-22T16:09:15.594996Z","shell.execute_reply":"2024-06-22T16:09:15.598246Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# plotMissingValues(data)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:16.266684Z","iopub.execute_input":"2024-06-22T16:09:16.267423Z","iopub.status.idle":"2024-06-22T16:09:16.271429Z","shell.execute_reply.started":"2024-06-22T16:09:16.267389Z","shell.execute_reply":"2024-06-22T16:09:16.270372Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"data = data.dropna()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:16.698197Z","iopub.execute_input":"2024-06-22T16:09:16.699185Z","iopub.status.idle":"2024-06-22T16:09:16.777863Z","shell.execute_reply.started":"2024-06-22T16:09:16.699117Z","shell.execute_reply":"2024-06-22T16:09:16.777022Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# plotMissingValues(data)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:09:17.982909Z","iopub.execute_input":"2024-06-22T16:09:17.983285Z","iopub.status.idle":"2024-06-22T16:09:17.987389Z","shell.execute_reply.started":"2024-06-22T16:09:17.983253Z","shell.execute_reply":"2024-06-22T16:09:17.986427Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"## Test and Train Split","metadata":{}},{"cell_type":"code","source":"X = data.drop('Label', axis=1)\ny = data['Label']","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:10:12.407361Z","iopub.execute_input":"2024-06-22T16:10:12.408434Z","iopub.status.idle":"2024-06-22T16:10:12.460427Z","shell.execute_reply.started":"2024-06-22T16:10:12.408387Z","shell.execute_reply":"2024-06-22T16:10:12.459544Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"print(X.shape)\nprint(y.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:10:13.864766Z","iopub.execute_input":"2024-06-22T16:10:13.865568Z","iopub.status.idle":"2024-06-22T16:10:13.870401Z","shell.execute_reply.started":"2024-06-22T16:10:13.865522Z","shell.execute_reply":"2024-06-22T16:10:13.869406Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"(225711, 78)\n(225711,)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert int64 to int32 and float64 to float32 preserving column-wise types\n\n\ncolumn_types = X.dtypes\n\nfor col in X.columns:\n    if np.issubdtype(column_types[col], np.int64):\n        X[col] = X[col].astype(np.int32)\n    elif np.issubdtype(column_types[col], np.float64):\n        X[col] = X[col].astype(np.float32)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:10:15.783499Z","iopub.execute_input":"2024-06-22T16:10:15.783927Z","iopub.status.idle":"2024-06-22T16:10:15.865653Z","shell.execute_reply.started":"2024-06-22T16:10:15.783893Z","shell.execute_reply":"2024-06-22T16:10:15.864831Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"y = y.astype(np.int32)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:12:17.075748Z","iopub.execute_input":"2024-06-22T16:12:17.076440Z","iopub.status.idle":"2024-06-22T16:12:17.081188Z","shell.execute_reply.started":"2024-06-22T16:12:17.076406Z","shell.execute_reply":"2024-06-22T16:12:17.080317Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"# y.dtype","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:12:18.990148Z","iopub.execute_input":"2024-06-22T16:12:18.990873Z","iopub.status.idle":"2024-06-22T16:12:18.997158Z","shell.execute_reply.started":"2024-06-22T16:12:18.990841Z","shell.execute_reply":"2024-06-22T16:12:18.995977Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"dtype('int32')"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:12:39.548548Z","iopub.execute_input":"2024-06-22T16:12:39.548951Z","iopub.status.idle":"2024-06-22T16:12:39.622083Z","shell.execute_reply.started":"2024-06-22T16:12:39.548920Z","shell.execute_reply":"2024-06-22T16:12:39.621055Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:12:41.680463Z","iopub.execute_input":"2024-06-22T16:12:41.681399Z","iopub.status.idle":"2024-06-22T16:12:41.896780Z","shell.execute_reply.started":"2024-06-22T16:12:41.681362Z","shell.execute_reply":"2024-06-22T16:12:41.895912Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"scaler = StandardScaler()\nX_train_s = scaler.fit_transform(X_train)\nX_test_s = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:12:45.456524Z","iopub.execute_input":"2024-06-22T16:12:45.456974Z","iopub.status.idle":"2024-06-22T16:12:45.749126Z","shell.execute_reply.started":"2024-06-22T16:12:45.456942Z","shell.execute_reply":"2024-06-22T16:12:45.748262Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"print(X_train.shape)\nprint(X_test.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:12:47.389159Z","iopub.execute_input":"2024-06-22T16:12:47.389862Z","iopub.status.idle":"2024-06-22T16:12:47.394625Z","shell.execute_reply.started":"2024-06-22T16:12:47.389829Z","shell.execute_reply":"2024-06-22T16:12:47.393674Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"(203139, 78)\n(22572, 78)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Training the Model","metadata":{}},{"cell_type":"code","source":"# Machine learning Model \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Machine learning model evaluation\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_curve, auc, confusion_matrix\n\n\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import label_binarize\nfrom itertools import cycle","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Random Forest","metadata":{}},{"cell_type":"code","source":"rf_model = RandomForestClassifier(n_estimators=50, random_state=42)\nrf_model.fit(X_train, y_train)\nrf_pred = rf_model.predict(X_test)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Getting feature importances from the trained model\nimportances = rf_model.feature_importances_\n\n# Getting the indices of features sorted by importance\nindices = sorted(range(len(importances)), key=lambda i: importances[i], reverse=False)\nfeature_names = [f\"{df.columns[i]}\" for i in indices]  # Replace with your column names\n\n# Plotting feature importances horizontally\nplt.figure(figsize=(8, 14))\nplt.barh(range(X_train.shape[1]), importances[indices], align=\"center\")\nplt.yticks(range(X_train.shape[1]), feature_names)\nplt.xlabel(\"Importance\")\nplt.title(\"Feature Importances\")\nplt.show()\n\n\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.tree import plot_tree\n\nestimator = rf_model.estimators_[0]  # Selecting the first estimator from the random forest model\n\n\nplt.figure(figsize=(20, 10))\nplot_tree(estimator, filled=True, rounded=True)\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Evaluation","metadata":{}},{"cell_type":"code","source":"pip install seaborn --upgrade","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_confusion_matrix(y_true, y_pred, classes, title):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)\n    plt.title(title)\n    plt.xlabel('Predicted')\n    plt.ylabel('True')\n\n    plt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf_accuracy = accuracy_score(y_test, rf_pred)\nrf_f1 = f1_score(y_test, rf_pred)\nrf_precision = precision_score(y_test, rf_pred)\nrf_recall = recall_score(y_test, rf_pred)\n\nprint('\\nRandom Forest Metrics:')\nprint(f'Accuracy: {rf_accuracy:.4f}')\nprint(f'F1 Score: {rf_f1:.4f}')\nprint(f'Precision: {rf_precision:.4f}')\nprint(f'Recall: {rf_recall:.4f}')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_confusion_matrix(y_test, rf_pred, ['Benign', 'DDoS'], 'Random Forest Confusion Matrix')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## logistic Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import make_pipeline","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lr_model = make_pipeline(StandardScaler(), LogisticRegression(random_state=42, max_iter=500))\nlr_model.fit(X_train, y_train)\nlr_pred = lr_model.predict(X_test)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier\n# Standardize the data\nscaler = StandardScaler()\nX_train_s = scaler.fit_transform(X_train)\nX_test_s = scaler.transform(X_test)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize the SGDClassifier with logistic loss\nsgd = SGDClassifier(loss='log_loss', max_iter=1, warm_start=True, random_state=42)\n\n# Lists to store the loss values and iteration numbers\nlosses = []\niterations = 600  # Number of iterations for training\n\n# Train the model using partial_fit\nfor i in range(iterations):\n    sgd.partial_fit(X_train_s, y_train, classes=np.unique(y_train))\n    loss = sgd.score(X_train_s, y_train)  # Use negative accuracy as a proxy for loss\n    losses.append(loss)\n\n# Plot the loss against iterations\nplt.figure(figsize=(10, 6))\nplt.plot(range(iterations), losses, label='Training Loss')\nplt.xlabel('Iteration')\nplt.ylabel('Loss')\nplt.title('Loss vs. Iterations for SGD Logistic Regression')\nplt.legend()\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lr_accuracy = accuracy_score(y_test, lr_pred)\nlr_f1 = f1_score(y_test, lr_pred)\nlr_precision = precision_score(y_test, lr_pred)\nlr_recall = recall_score(y_test, lr_pred)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('\\nLogistic Regression Metrics:')\nprint(f'Accuracy: {lr_accuracy:.4f}')\nprint(f'F1 Score: {lr_f1:.4f}')\nprint(f'Precision: {lr_precision:.4f}')\nprint(f'Recall: {lr_recall:.4f}')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_confusion_matrix(y_test, lr_pred, ['Benign', 'DDoS'], 'Logistic Regression Confusion Matrix')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Neural Network","metadata":{}},{"cell_type":"code","source":"nn_model = MLPClassifier(hidden_layer_sizes=(10,), max_iter=600, random_state=42)\nnn_model.fit(X_train, y_train)\nnn_pred = nn_model.predict(X_test)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nn_accuracy = accuracy_score(y_test, nn_pred)\nnn_f1 = f1_score(y_test, nn_pred)\nnn_precision = precision_score(y_test, nn_pred)\nnn_recall = recall_score(y_test, nn_pred)\n\nprint('\\nNeural Network Metrics:')\nprint(f'Accuracy: {nn_accuracy:.4f}')\nprint(f'F1 Score: {nn_f1:.4f}')\nprint(f'Precision: {nn_precision:.4f}')\nprint(f'Recall: {nn_recall:.4f}')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_confusion_matrix(y_test, nn_pred, ['Benign', 'DDoS'], 'Neural Network Confusion Matrix')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam\n\n\n\n# Standardize the data\nscaler = StandardScaler()\nX_train_s = scaler.fit_transform(X_train)\nX_test_s = scaler.transform(X_test)\n\n# Define the model\nmodel = Sequential([\n    Dense(10, activation='relu', input_shape=(X_train_s.shape[1],)),\n    Dense(1, activation='sigmoid')  # Assuming binary classification\n])\n\n# Compile the model\nmodel.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train_s, y_train, epochs=600, batch_size=32, validation_split=0.2, verbose=1)\n\n# Predict\nnn_pred = model.predict(X_test_s)\nnn_pred = (nn_pred > 0.5).astype(int)  # Convert probabilities to class labels","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X.shape)\nprint(y.shape)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## RNN Model","metadata":{}},{"cell_type":"markdown","source":"### Dividing data into window slices","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def create_sliding_windows(data, window_size):\n    \"\"\"\n    Create sliding windows from data.\n    \n    Parameters:\n    data (numpy array): The transformed feature data.\n    window_size (int): The size of the sliding window.\n    \n    Returns:\n    numpy array: 3D array with shape (num_windows, window_size, num_features).\n    \"\"\"\n    num_packets, num_features = data.shape\n    num_windows = num_packets - window_size + 1\n    \n    windows = np.empty((num_windows, window_size, num_features))\n\n    for i in range(num_windows):\n        windows[i] = data[i:i + window_size]\n    \n    return windows","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:13:20.211069Z","iopub.execute_input":"2024-06-22T16:13:20.211427Z","iopub.status.idle":"2024-06-22T16:13:20.217841Z","shell.execute_reply.started":"2024-06-22T16:13:20.211399Z","shell.execute_reply":"2024-06-22T16:13:20.216599Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"window_size = 100\nwindows = create_sliding_windows(X_train_s, window_size)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:13:24.622421Z","iopub.execute_input":"2024-06-22T16:13:24.623225Z","iopub.status.idle":"2024-06-22T16:13:28.285953Z","shell.execute_reply.started":"2024-06-22T16:13:24.623188Z","shell.execute_reply":"2024-06-22T16:13:28.284799Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"# np.save('windows_data.npy', windows)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:16:33.414126Z","iopub.execute_input":"2024-06-22T16:16:33.414551Z","iopub.status.idle":"2024-06-22T16:17:14.644820Z","shell.execute_reply.started":"2024-06-22T16:16:33.414517Z","shell.execute_reply":"2024-06-22T16:17:14.643787Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"# windows = np.load('windows_data.npy')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"windows.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"window_size=100\nwindows_y = y_train[window_size - 1:]","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:18:23.588479Z","iopub.execute_input":"2024-06-22T16:18:23.588922Z","iopub.status.idle":"2024-06-22T16:18:23.593921Z","shell.execute_reply.started":"2024-06-22T16:18:23.588890Z","shell.execute_reply":"2024-06-22T16:18:23.592961Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"windows_y","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:18:25.784739Z","iopub.execute_input":"2024-06-22T16:18:25.785142Z","iopub.status.idle":"2024-06-22T16:18:25.793650Z","shell.execute_reply.started":"2024-06-22T16:18:25.785109Z","shell.execute_reply":"2024-06-22T16:18:25.792744Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"181292    1\n195093    0\n110551    1\n905       0\n219935    0\n         ..\n119895    0\n103710    0\n131949    1\n146884    0\n121974    1\nName: Label, Length: 203040, dtype: int32"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, LSTM, Dense, Bidirectional, BatchNormalization, Conv1D, Flatten\nfrom tensorflow.keras.optimizers import Adam","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:18:30.316542Z","iopub.execute_input":"2024-06-22T16:18:30.316961Z","iopub.status.idle":"2024-06-22T16:18:39.373122Z","shell.execute_reply.started":"2024-06-22T16:18:30.316930Z","shell.execute_reply":"2024-06-22T16:18:39.372218Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stderr","text":"2024-06-22 16:18:32.307290: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-22 16:18:32.307473: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-22 16:18:32.423550: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"# Define the model architecture\ndef create_lstm_model(input_shape):\n    model = Sequential()\n    \n    model.add(Input(shape=input_shape))\n\n    # Bidirectional LSTM layers with Batch Normalization after every two layers\n    model.add(Bidirectional(LSTM(64, return_sequences=True)))\n    model.add(Dense(128, activation='relu'))\n    model.add(BatchNormalization())\n    \n    # Output layer\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # Compile the model\n    model.compile(optimizer=Adam(learning_rate=0.001), \n                  loss='binary_crossentropy', \n                  metrics=['accuracy'])\n    \n    return model","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:18:39.374620Z","iopub.execute_input":"2024-06-22T16:18:39.375213Z","iopub.status.idle":"2024-06-22T16:18:39.383362Z","shell.execute_reply.started":"2024-06-22T16:18:39.375183Z","shell.execute_reply":"2024-06-22T16:18:39.382549Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"input_shape = windows.shape[1:]","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:18:39.783947Z","iopub.execute_input":"2024-06-22T16:18:39.784606Z","iopub.status.idle":"2024-06-22T16:18:39.789006Z","shell.execute_reply.started":"2024-06-22T16:18:39.784574Z","shell.execute_reply":"2024-06-22T16:18:39.787943Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"with tf.device('/CPU:0'):\n    model = create_lstm_model((100, 78))","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:18:41.943822Z","iopub.execute_input":"2024-06-22T16:18:41.944479Z","iopub.status.idle":"2024-06-22T16:18:42.871648Z","shell.execute_reply.started":"2024-06-22T16:18:41.944448Z","shell.execute_reply":"2024-06-22T16:18:42.870802Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"with tf.device('/GPU:0'):\n    history = model.fit(windows, windows_y, epochs = 40, validation_split=0.2, verbose = 1)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:19:14.736147Z","iopub.execute_input":"2024-06-22T16:19:14.736536Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('hi')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}